import argparse 
import requests 
import logging

BASE_URL = "https://api.spotify.com/v1/" #The base URL for all the APi calls


def authorize(client_id, client_secret):
    auth_url = "https://accounts.spotify.com/api/token" #URL to generate spotify auth token
    data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
    } #The data we will send in out post request

    auth_response = requests.post(auth_url, data=data) #send the POST request to spotify
    token = auth_response.json().get('access_token')#Gets the json from the response and gets the access token from the json

    return token


def get_user_id(header):
    response = requests.get(
        url=f'{BASE_URL}/me',
        headers=header
    )#sends a request to get the user id
    user_id = response.json.get('id')

    return user_id


def get_saved_playlist(header, user_id):
    response = requests.get(
        url=f'{BASE_URL}/users/{user_id}/playlists',
        headers=header,
        data={'limit': 50}
    )#sends a request to get a users saved plalists. Builds up the URL with an f string
    playlists = response.json().get('items')#gets a list of playlist items (dict format)

    return playlists


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--client-id',
        dest="client_id",
        default=""
    )
    parser.add_argument(
        '--client-secret',
        dest="client_secret",
        default=""
    )
    parser.add_argument(
        '--playlist-name',
        dest="playlist_name",
        default=""
    )
    args = parser.parse_args()

    return args


if __name__ == '__main__':
    args = parse_args() #gets command line arguments
    token = authorize(args.client_id, args.client_secret) #passes the clientID and the client secret which is generated by spotify to the token generator

    header = {
        'Authorization': 'Bearer' + token
    } #Creates the header that will be sent in all requests

    user_id = get_user_id(header)
    saved_playlists = get_saved_playlist(header, user_id) #Gets a list of all the saved playlist

    for playlist in saved_playlists:
        if playlist['name'] == args.playlist_name:
            target_playlist = playlist
        if playlist['name'] == "Discover Weekly":
            source_playlist = playlist
        if source_playlist and target_playlist:
            #check to see if we found both playlist
            #If we did we can break out of this loop
            break
    #This for loop loops through all of the returned playlists until it finds the correct one
    if not target_playlist:
        logging.warning("Your playlist was not found...\nTerminating script")
        exit()
    if not source_playlist:
        logging.warning("Your Discover weekly playlist was not found...\nEnsure it is added to your library\nTerminating script")
        exit()
    #These two if check will ensure we have found both a target and source playlist. We need both of these so if we are missing one then quit the scrip
    





#TODO:
#Look into Oauth so token doesn't expire every hour (for automation)
